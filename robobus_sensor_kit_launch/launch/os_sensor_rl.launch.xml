<launch>

  <arg name="ouster_ns_rl" default="/sensing/lidar/rear_left/ouster"
    description="Override the default namespace of all ouster nodes"/>
  <arg name="sensor_hostname_rl" default="192.168.5.123"
    description="hostname or IP in dotted decimal form of the sensor"/>
  <arg name="udp_dest" default=""
    description="hostname or IP where the sensor will send data packets"/>
  <arg name="lidar_port" default="0"
    description="port to which the sensor should send lidar data"/>
  <arg name="imu_port" default="0"
    description="port to which the sensor should send imu data"/>
  <arg name="udp_profile_lidar" default=""
    description="lidar packet profile; possible values: {
    LEGACY,
    RNG19_RFL8_SIG16_NIR16_DUAL,
    RNG19_RFL8_SIG16_NIR16,
    RNG15_RFL8_NIR8
    }"/>
  <arg name="lidar_mode" default=""
    description="resolution and rate; possible values: {
    512x10,
    512x20,
    1024x10,
    1024x20,
    2048x10,
    4096x5
    }"/>
  <arg name="timestamp_mode" default="TIME_FROM_ROS_TIME"
    description="method used to timestamp measurements; possible values: {
    TIME_FROM_INTERNAL_OSC,
    TIME_FROM_SYNC_PULSE_IN,
    TIME_FROM_PTP_1588,
    TIME_FROM_ROS_TIME
    }"/>
  <arg name="metadata" default=""
    description="path to write metadata file when receiving sensor data"/>
  <arg name="viz" default="false"
    description="whether to run a rviz"/>
  <arg name="rviz_config" default="$(find-pkg-share ouster_ros)/config/viz.rviz"
    description="optional rviz config file"/>

  <arg name="sensor_frame" default="os_sensor"
    description="sets name of choice for the sensor_frame tf frame, value can not be empty"/>
  <arg name="lidar_frame" default="os_lidar"
    description="sets name of choice for the os_lidar tf frame, value can not be empty"/>
  <arg name="imu_frame" default="os_imu"
      description="sets name of choice for the os_imu tf frame, value can not be empty"/>
  <arg name="point_cloud_frame" default=""
    description="which frame to be used when publishing PointCloud2 or LaserScan messages.
    Choose between the value of sensor_frame or lidar_frame, leaving this value empty
    would set lidar_frame to be the frame used when publishing these messages."/>

  <arg name="use_system_default_qos" default="false"
    description="Use the default system QoS settings"/>
  
  <arg name="proc_mask" default="PCL" description="
    use any combination of the 4 flags to enable or disable specific processors"/>

  <arg name="scan_ring" default="0" description="
    use this parameter in conjunction with the SCAN flag
    and choose a value the range [0, sensor_beams_count)"/>

  <group>
    <push-ros-namespace namespace="$(var ouster_ns_rl)"/>
    <node pkg="ouster_ros" exec="os_driver" name="os_driver" output="screen">
      <param name="sensor_hostname" value="$(var sensor_hostname_rl)"/>
      <param name="udp_dest" value="$(var udp_dest)"/>
      <param name="mtp_dest" value=""/>
      <param name="mtp_main" value="false"/>
      <param name="lidar_port" value="$(var lidar_port)"/>
      <param name="imu_port" value="$(var imu_port)"/>
      <param name="udp_profile_lidar" value="$(var udp_profile_lidar)"/>
      <param name="lidar_mode" value="$(var lidar_mode)"/>
      <param name="metadata" value="$(var metadata)"/>
      <param name="sensor_frame" value="os_sensor_rl"/>
      <param name="lidar_frame" value="os_lidar_rl"/>
      <param name="imu_frame" value="os_imu_rl"/>
      <param name="point_cloud_frame" value="$(var point_cloud_frame)"/>
      <param name="timestamp_mode" value="$(var timestamp_mode)"/>
      <param name="use_system_default_qos" value="$(var use_system_default_qos)"/>
      <param name="proc_mask" value="$(var proc_mask)"/>
      <param name="scan_ring" value="$(var scan_ring)"/>
    </node>
  </group>

  <!-- HACK: configure and activate the sensor node via a process execute since state
    transition is currently not availabe through launch.xml format -->
  <executable cmd="$(find-exec ros2) lifecycle set $(var ouster_ns_rl)/os_driver configure"
    launch-prefix="bash -c 'sleep 0; $0 $@'" output="screen"/>
  <executable cmd="$(find-exec ros2) lifecycle set $(var ouster_ns_rl)/os_driver activate"
    launch-prefix="bash -c 'sleep 1; $0 $@'" output="screen"/>

  <include if="$(var viz)" file="$(find-pkg-share ouster_ros)/launch/rviz.launch.xml">
    <arg name="ouster_ns_rl" value="$(var ouster_ns_rl)"/>
    <arg name="rviz_config" value="$(var rviz_config)"/>
  </include>

</launch>
